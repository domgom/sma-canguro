[%
	var diagrama : DiagramaER;
	diagrama := DiagramaER.allInstances().at(0);
%]
[%
	//Como la relaciones entre entidades 1:1 se hace conlocando en una de las entidades tenemos que llevar
	//cuales de las relaciones ya se han mapeado
	var relaciones1_1Creadas = new Set;
	
	for (entidad in diagrama.nodes){
	
	//Esta variable va a guardar todas las relaciones que existe entre entidades 1:N y 1:1 obtenidas a través
	//del método getForeignKeys.
	var foreignKeys = new Set;
	
	//Obtenemos todas las claves foraneas asociado a la entidad que estamos recorriendo
	foreignKeys := entidad.getForeignKeys(diagrama.links, relaciones1_1Creadas);
	
%]
CREATE TABLE [%=entidad.name%](
				[% 
					//Añadimos la Pk
					out.print("\tID_" + entidad.name); %] BIGINT NOT NULL AUTO_INCREMENT
				[%
					//Añadimos los campos de la FK
					for(fk in foreignKeys){
						out.println("\t," + fk.target.name + " BIGINT");
					}
				%]
				[%
				//Añadimos todos los atributos 
				for (atributo in entidad.atts){
										
					%]
				[%	 
					 if(atributo.tipo = EnumTipos#String){
						out.print("\t," + atributo.nombre); %] varchar(150)
				[%	 }
					 if(atributo.tipo = EnumTipos#int){
						out.print("\t," + atributo.nombre); %] int
				 [%	 }
					 if(atributo.tipo = EnumTipos#boolean){
						out.print("\t," + atributo.nombre); %] bool
				[%	 }
					 if(atributo.tipo = EnumTipos#float){
						out.print("\t," + atributo.nombre); %] float
			    [%	 }
					 if(atributo.tipo = EnumTipos#double){
						out.print("\t," + atributo.nombre); %] double
				[%	 }
					 if(atributo.tipo = EnumTipos#long){
						out.print("\t," + atributo.nombre); %] bigint
				[%	 }
					 if(atributo.tipo = EnumTipos#char){
						out.print("\t," + atributo.nombre); %] varchar(1)
				[%	}
				}
				%]
			[%
			  	//Creamos la restricción clave primaria
			  	out.println("\t,Primary Key (" + "ID_" + entidad.name + ")");
			  	//Creamos la restricciones a las claves foraneas
			  	for(fk in foreignKeys){
					out.println("\t,Foreign Key (" + fk.target.name + ") references " + fk.source.name + "(ID_" + fk.source.name + ")");
			 	}
			%]
)
			 
[%	}	%]


[%
operation Entidad getForeignKeys(enlaces:Collection, relaciones1_1:Set) : Set{
  var enlacesOrigen;
  var enlacesDestino;
  var listaRelaciones;
  var relacionesForaneas;
  enlacesOrigen = enlaces.select(l| l.cardinalidad = "1" and l.source = self);
  listaRelaciones = new Set;
  relacionesForaneas := new Set;
  for(enlace in enlacesOrigen){
  		
  			listaRelaciones.add(enlace);
  		
  }
  
  
  for(relacion in listaRelaciones){
  		enlacesDestino = enlaces.select(l|(l.cardinalidad = "N" or l.cardinalidad = "1" )  and l.target = relacion.target and not(l.source = self) );
  		for(enlace in enlacesDestino){
  		   if (enlace.cardinalidad = "1" and not relaciones1_1.includes(enlace.target)){
  				relacionesForaneas.add(enlace);
  				relaciones1_1.add(enlace.target);
  			}else{
  				if(enlace.cardinalidad = "N")
  					relacionesForaneas.add(enlace);
  			}
  			
  		}
  		
  }
  
 
  return relacionesForaneas;
  
}
%]
